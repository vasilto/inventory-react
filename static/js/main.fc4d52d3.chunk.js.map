{"version":3,"sources":["components/navbar.component.js","components/get-all-medicaments.component.js","components/add-medicament.component.js","App.js","index.js"],"names":["Navbar","className","to","Component","axios","require","default","isIt","boolean","Medicament","props","medicament","name","isAvailable","doesExpireAfterOpen","expirationDate","substring","MedicamentsList","state","medicaments","get","then","response","setState","data","catch","err","console","error","this","map","currentMedicament","_id","medicamentsList","AddMedicament","useState","form","setForm","errors","setErrors","isRunningOut","doesMedicamentExists","statusCode","type","description","linkLeaflet","setField","field","value","verifyIsMedicamentAddedAsync","useCallback","a","log","status","addMedicamentAsync","post","cantBeEmptyError","findFormErrors","newErrors","length","Form","style","width","Group","Label","Control","onChange","e","target","isInvalid","Feedback","as","FormLabel","Check","label","id","placeholder","checked","defaultChecked","Button","onClick","preventDefault","Object","keys","alert","App","path","exact","component","AddMedicaments","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc4d52d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n            <Link to=\"/\" className=\"navbar-brand\">MedInvent</Link>\r\n            <div className=\"collpase navbar-collapse\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"navbar-item\">\r\n              <Link to=\"/all\" className=\"nav-link\">Списък с Лекарства</Link>\r\n              </li>\r\n              <li className=\"navbar-item\">\r\n              <Link to=\"/add\" className=\"nav-link\">Добави Лекарства</Link>\r\n              </li>\r\n              <li className=\"navbar-item\">\r\n              <Link to=\"/user\" className=\"nav-link\">Създай Лечение</Link>\r\n              </li>\r\n            </ul>\r\n            </div>\r\n          </nav>\r\n        );\r\n    }    \r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nconst axios = require('axios').default;\r\n\r\n\r\nfunction isIt(boolean){\r\n    if (boolean) {\r\n        return \"Да\"\r\n    } else return \"Не\";\r\n};\r\n\r\nvar backendURI = \"https://main-invento-m5k5bapnre712ycg-gtw.qovery.io/\";\r\n\r\nconst Medicament = props => (\r\n    \r\n\r\n    <tr>\r\n      <td>{props.medicament.name}</td>\r\n      <td>{isIt(props.medicament.isAvailable)}</td>\r\n      <td>{isIt(props.medicament.doesExpireAfterOpen)}</td>\r\n      <td>{props.medicament.expirationDate.substring(0,10)}</td>\r\n    </tr>\r\n  )\r\n\r\nexport default class MedicamentsList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state={medicaments: []};\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`${backendURI}medicaments/`)\r\n            .then( response => {\r\n                this.setState({medicaments: response.data})\r\n            })\r\n            .catch(err=> {\r\n                console.error(err);\r\n            })\r\n    }\r\n\r\n    medicamentsList() {\r\n        return this.state.medicaments.map(currentMedicament => {\r\n            return <Medicament medicament={currentMedicament} key={currentMedicament._id} />\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Списък на медикаментите</h3>\r\n                <table className=\"table\">\r\n                    <thead className=\"thead-light\">\r\n                        <tr>\r\n                            <th>Име</th>\r\n                            <th>Наличност</th>\r\n                            <th>Разваля ли се след отваряне</th>\r\n                            <th>Годно до</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.medicamentsList()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport '../App.css';\r\n// REACT BOOTSTRAP COMPONENTS\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n// BOOTSTRAP LIBRARY\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport FormGroup from 'react-bootstrap/esm/FormGroup';\r\nimport FormLabel from 'react-bootstrap/esm/FormLabel';\r\nimport FormCheck from 'react-bootstrap/esm/FormCheck';\r\n\r\nconst axios = require('axios').default;\r\nconst AddMedicament = () => {\r\n    const [form, setForm] = useState({})\r\n    const [errors, setErrors] = useState({})\r\n    let [isAvailable] = useState(true)\r\n    let [isRunningOut] = useState(false)\r\n    let [doesExpireAfterOpen] = useState(false)\r\n    let [doesMedicamentExists] = useState(false)\r\n    var statusCode = 0;\r\n    const { name,\r\n        type,\r\n        description,\r\n        linkLeaflet,\r\n        expirationDate } = form\r\n\r\n    const setField = (field, value) => {\r\n        setForm({\r\n            ...form,\r\n            [field]: value\r\n        })\r\n        // Check and see if errors exist, and remove them from the error object:\r\n        if (!!errors[field]) setErrors({\r\n            ...errors,\r\n            [field]: null\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        // get our new errors\r\n        const newErrors = findFormErrors()\r\n        // Conditional logic:\r\n        if (Object.keys(newErrors).length > 0) {\r\n            // We got errors!\r\n            setErrors(newErrors)\r\n        } else {\r\n            (async() => {\r\n                await addMedicamentAsync()\r\n                console.log(`the status code after executing the function ${statusCode}`)\r\n                if (statusCode !== 200 || statusCode !== 204) {\r\n                    alert(\"нещо се обърка\")\r\n                } else\r\n                    // No errors! Put any logic here for the form submission!\r\n                    alert(`Добавихте нов медикамент в инвентара ${name}`)\r\n            })(); \r\n        }\r\n    }\r\n\r\n    const verifyIsMedicamentAddedAsync = useCallback(\r\n        async () => {\r\n            axios.get(`https://main-invento-m5k5bapnre712ycg-gtw.qovery.io/medicaments/${name}`).\r\n                then(response => {\r\n                    console.log(response)\r\n                    if (response.status === 200) {\r\n                        doesMedicamentExists = true\r\n                        console.log(\"if \" + response.status)\r\n                        console.log(\"does med exist in verify method: \" + doesMedicamentExists)\r\n                    } else console.log(\"else\" + response.status)\r\n                })\r\n        }\r\n    )\r\n\r\n\r\n    const addMedicamentAsync = useCallback(async () => {\r\n        axios.post('https://main-invento-m5k5bapnre712ycg-gtw.qovery.io/medicaments/add', {\r\n            name: name,\r\n            expirationDate: expirationDate,\r\n            description: description,\r\n            linkLeaflet: linkLeaflet,\r\n            doesExpireAfterOpen: doesExpireAfterOpen,\r\n            isRunningOut: isRunningOut,\r\n            isAvailable: isAvailable\r\n        }).then((response) => {\r\n            console.log(response)\r\n            console.log(response.status)\r\n            statusCode = response.status\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        })\r\n    })\r\n\r\n    var cantBeEmptyError = \"Не може да е празно!\"\r\n\r\n    const findFormErrors = () => {\r\n        const newErrors = {}\r\n        // name errors\r\n        verifyIsMedicamentAddedAsync()\r\n        console.log(`does medicament exists in find errors method: ${doesMedicamentExists}`)\r\n        if (!name || name === '') newErrors.name = cantBeEmptyError\r\n        else if (name.length > 30) newErrors.name = 'name is too long!'\r\n        else if (doesMedicamentExists) newErrors.name = 'Този медикамент вече е добавен в инвентара'\r\n        // description errors\r\n        if (!description || description === '') newErrors.description = cantBeEmptyError\r\n        else if (description.length > 100) newErrors.description = 'description is too long!'\r\n        // expiration date errors\r\n        if (!expirationDate || expirationDate === '') newErrors.expirationDate = cantBeEmptyError\r\n        // type errors\r\n        if (!type || type === '') newErrors.type = cantBeEmptyError\r\n\r\n        return newErrors\r\n    }\r\n\r\n    return (\r\n        <div className='Form d-flex flex-column align-items-center'>\r\n            <h1>Добави нов медикамент</h1>\r\n            <Form style={{ width: '300px' }}>\r\n                <Form.Group>\r\n                    <Form.Label>Име</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        onChange={e => setField('name', e.target.value)}\r\n                        isInvalid={!!errors.name}\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>{errors.name}</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Линк към листовката</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        onChange={e => setField('linkLeaflet', e.target.value)}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Описание</Form.Label>\r\n                    <Form.Control\r\n                        as='textarea'\r\n                        onChange={e => setField('description', e.target.value)}\r\n                        isInvalid={!!errors.description}\r\n                    />\r\n                    <Form.Control.Feedback type='invalid'>{errors.description}</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <fieldset>\r\n                    <Form.Group >\r\n                        <FormLabel>Тип на Медикамента</FormLabel>\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"first radio\"\r\n                            name=\"formHorizontalRadios\"\r\n                            id=\"formHorizontalRadios1\"\r\n                            onChange={e => setField('type', e.target.name)}\r\n                            isInvalid={!!errors.type}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"second radio\"\r\n                            name=\"formHorizontalRadios\"\r\n                            id=\"formHorizontalRadios2\"\r\n                            onChange={e => setField('type', e.target.name)}\r\n                            isInvalid={!!errors.type}\r\n                        />\r\n                        <Form.Check\r\n                            type=\"radio\"\r\n                            label=\"third radio\"\r\n                            name=\"formHorizontalRadios\"\r\n                            id=\"formHorizontalRadios3\"\r\n                            onChange={e => setField('type', e.target.name)}\r\n                            isInvalid={!!errors.type}\r\n                        />\r\n                        <Form.Control.Feedback type='invalid'>{errors.type}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </fieldset>\r\n                <Form.Group>\r\n                    <Form.Label>Годен до</Form.Label>\r\n                    <Form.Control\r\n                        type=\"date\"\r\n                        name=\"expirationDate\"\r\n                        onChange={e => setField('expirationDate', e.target.value)}\r\n                        isInvalid={!!errors.expirationDate}\r\n                        placeholder=\"Годен до\" />\r\n                    <Form.Control.Feedback type='invalid'>{errors.expirationDate}</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group >\r\n                    <Form.Check\r\n                        type=\"switch\"\r\n                        id=\"doesExpireAfterOpen\"\r\n                        label=\"Разваля ли се след отваряне\"\r\n                        onChange={e => doesExpireAfterOpen = e.target.checked}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Check\r\n                        type=\"switch\"\r\n                        id=\"isRunningOut\"\r\n                        label=\"Свършва ли\"\r\n                        onChange={e => isRunningOut = e.target.checked}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Check\r\n                        type=\"switch\"\r\n                        id=\"isAvailable\"\r\n                        label=\"Наличен\"\r\n                        onChange={e => isAvailable = e.target.checked}\r\n                        defaultChecked\r\n                    />\r\n                </Form.Group>\r\n\r\n\r\n                <Button type='submit' onClick={handleSubmit}>Добави</Button>\r\n                <Form.Group></Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddMedicament;","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Navbar from \"./components/navbar.component\";\nimport MedicamentsList from \"./components/get-all-medicaments.component\";\nimport AddMedicaments from \"./components/add-medicament.component\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <Navbar />\n        <br/>\n        <Route path=\"/all\" exact component={MedicamentsList} />\n        <Route path=\"/add\" component={AddMedicaments} />\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}